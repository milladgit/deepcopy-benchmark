
#include <stdio.h>
#include <stdlib.h>
#include <benchmark/benchmark.h>
#include <vector>
#include <string>
#include <chrono>
#include <thread>
#include <iostream>
#include <iomanip>
#include "../../datadefs.h"

#include <queue>
using namespace std;

#include <openacc.h>
#include <omp.h>



class TransferUnit {
public:
	char *q;
	size_t q_len;
	size_t total_size;
	char *next_ptr;

	queue<void*> q_addr;

	TransferUnit() {
		q = NULL;
		q_len = 0;
		total_size = 0;
		next_ptr = NULL;		
	}

	void init(size_t sz) {
		q = (char*) malloc(sz);
		next_ptr = q;
		q_len = 0;
		total_size = sz;
	}


	char *get_next_ptr(size_t sz) {
		next_ptr += sz;
		q_len += sz;
		q_addr.push(next_ptr-sz);
		return next_ptr - sz;
	}

	void *get_next_ptr_deserialize(queue<void*> &q_addr_input) {
		void *s = q_addr_input.front();
		q_addr_input.pop();
		return s;
	}

	void copyToGPU() {
		#pragma acc enter data copyin(q[0:total_size])
	}

	void copyFromGPU() {
		#pragma acc exit data copyout(q[0:total_size])		
	}

	void freeMem() {
		free(q);
		q = NULL;
	}

};

typedef std::chrono::time_point<std::chrono::high_resolution_clock> time_type;


void show_time(time_type &start_time, time_type &end_time, char *topic) {
/*
	double seconds = 1.0 * chrono::duration_cast<chrono::seconds>(end_time - start_time).count();
	if(seconds >= 0.01) {
		printf("%%s - Time: %%.2fs\n", topic, seconds);
	} else {
		double time = 1.0 * chrono::duration_cast<chrono::microseconds>(end_time - start_time).count();
		printf("%%s - Time: %%.2fus\n", topic, time);
	}
*/

	auto micro_sec = chrono::duration_cast<chrono::microseconds>(end_time - start_time).count();
	cout << topic << " - Time: " << micro_sec << "us" << endl;
}



// class definitions
%s


static void BM_Deepcopy(benchmark::State& state) {
	datatype scale = 31;
	int N = state.range(0);

	// time_type start_time, end_time, total_start_time, total_end_time;

	// total_start_time = chrono::high_resolution_clock::now();


	// start_time = chrono::high_resolution_clock::now();
	// allocating classes
	%s
	// end_time = chrono::high_resolution_clock::now();
	// show_time(start_time, end_time, "Allocation");


	// start_time = chrono::high_resolution_clock::now();
	// initializing the variables
	%s
	// end_time = chrono::high_resolution_clock::now();
	// show_time(start_time, end_time, "Initialization");


	// start_time = chrono::high_resolution_clock::now();
	// transfer data to gpu
	%s
	// end_time = chrono::high_resolution_clock::now();
	// show_time(start_time, end_time, "Transfer to GPU");


	// start_time = chrono::high_resolution_clock::now();
	// compute section
	for (auto _ : state) {
		%s
	}
	// end_time = chrono::high_resolution_clock::now();
	// show_time(start_time, end_time, "Compute");


	// start_time = chrono::high_resolution_clock::now();
	// transfer data from gpu
	%s
	// end_time = chrono::high_resolution_clock::now();
	// show_time(start_time, end_time, "Transfer from GPU");


	// start_time = chrono::high_resolution_clock::now();
	// check results
	%s
	// end_time = chrono::high_resolution_clock::now();
	// show_time(start_time, end_time, "Check results");


	// total_end_time = chrono::high_resolution_clock::now();
	// show_time(total_start_time, total_end_time, "Total time");


}
// Register the function as a benchmark
BENCHMARK(BM_Deepcopy)->RangeMultiplier(10)->Range(100, 100000000);


// BENCHMARK_MAIN();
int main(int argc, char** argv) {
	// for (auto& test_input : { /* ... */ })
	// benchmark::RegisterBenchmark(test_input.name(), BM_test, test_input);

	benchmark::Initialize(&argc, argv);
	benchmark::RunSpecifiedBenchmarks();

	return 0;
}

